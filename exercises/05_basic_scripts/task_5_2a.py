# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""


def ip_to_oct(bin_string: str) -> list:
    return [int(bin_string[i - 8:i], 2) for i in range(8, len(bin_string) + 1, 8)]


cidr = input('Введите IP-сети в формате CIDR (aa.bb.cc.dd/xx) ').split('/')
ipaddr = [int(i) for i in cidr[0].split('.')]

netmask = int(cidr[1])
binmask = '1' * netmask + '0' * (32 - netmask)
octmask = ip_to_oct(binmask)

ip_bin = '{:08b}{:08b}{:08b}{:08b}'.format(*ipaddr)
ip_bin_net = ip_bin[:netmask] + '0' * (32 - netmask)
oct_ip_net = ip_to_oct(ip_bin_net)

out_net = ['Network:',
           '{0:<8}  {1:<8}  {2:<8}  {3:<8}',
           '{0:08b}  {1:08b}  {2:08b}  {3:08b}']
out_mask = ['Mask:',
            '/{mask}',
            '{0:<8}  {1:<8}  {2:<8}  {3:<8}',
            '{0:08b}  {1:08b}  {2:08b}  {3:08b}']

print('\n'.join(out_net).format(*oct_ip_net))
print('\n'.join(out_mask).format(*octmask, mask=netmask))
